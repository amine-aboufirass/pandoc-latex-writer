from . import write as w
from . import filter as f

import argparse
from panflute import *
import subprocess
from importlib.resources import files

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("input_filename", help="Input Markdown file", metavar="input-filename")
    parser.add_argument(
        "-o",
        "--output-filename",
        help="Output LaTeX file name. Defaults to input-filename if not specified",
        type=str,
    )
    parser.add_argument("-b", "--bibliography", action="store_true", help="Include bibliography")
    parser.add_argument("-q", "--quiet-latex", action="store_true", help="Compile LaTeX quietly")
    parser.add_argument(
        "-j",
        "--jobname",
        type=str,
        help="Name of intermediate files generated by latexmk, including the PDF file. "
             "Defaults to output-filename if not specified"
    )
    args = parser.parse_args()

    pandoc_args = [
        f"--metadata=bibliography:{'true' if args.bibliography else 'false'}"
    ]

    with open(f"{args.input_filename}.md") as fs:
        doc = convert_text(
            fs.read(),
            standalone=True,
            extra_args=pandoc_args
        )

    actions = [f.action, w.action, w.action]

    doc = run_filters(actions, doc=doc)

    tex_filename = args.output_filename if args.output_filename else args.input_filename
    latex_template_path = files('pandoc_latex_writer').joinpath('template.latex')

    pandoc_args = [
        f"--template={latex_template_path}",
        f"--output={tex_filename}.tex"
    ]

    result = convert_text(
        doc,
        input_format="panflute",
        output_format="plain",
        standalone=True,
        extra_args=pandoc_args
    )

    latexmk_args = ["latexmk", "-lualatex", "--shell-escape"]

    if args.jobname:
        latexmk_args.append(f"-jobname={args.jobname}")

    if args.quiet_latex:
        latexmk_args.append("--quiet")

    latexmk_args.append(tex_filename)

    subprocess.run(latexmk_args)